/*
 * generated by Xtext 2.10.0
 */
package br.edu.ifce.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import br.edu.ifce.maker.Curso
import java.io.File
import br.edu.ifce.maker.Modulo
import br.edu.ifce.maker.Aula
import java.util.ArrayList
import br.edu.ifce.maker.Secao
import br.edu.ifce.maker.Topico
import br.edu.ifce.maker.MidiaTextual
import br.edu.ifce.maker.MidiaBinaria
import br.edu.ifce.maker.Midia
import br.edu.ifce.maker.Texto
import br.edu.ifce.maker.Link

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MakerGenerator extends AbstractGenerator {
	
	val dirPath = new ArrayList<String>();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) { 
		for (curso : resource.allContents.toIterable.filter(Curso)) {
			
			this.dirPath.add(snakefy(curso.name))
			this.generateCursoIndexPage(curso, fsa)
			
			for(modulo : curso.modulos) {
				this.dirPath.add(snakefy(modulo.name))
				this.generateModuloIndexPage(modulo, fsa)
				
				for(aula : modulo.aulas) {
					this.generateAulaPage(aula, fsa)
				}
				
				this.dirPath.pop()
			}
			
			this.dirPath.pop()
		}
	}
	
//	=============== Generation Methods ==================
	
	def generateCursoIndexPage(Curso curso, IFileSystemAccess2 fsa) {
		val indexPageCursoPath = this.dirPath.pathfy() + 'index.html'
		
		fsa.generateFile(indexPageCursoPath, curso.compile())
	}
	
	def generateModuloIndexPage(Modulo modulo, IFileSystemAccess2 fsa) {
		val indexPageModuloPath = this.dirPath.pathfy() + 'index.html'
		
		fsa.generateFile(indexPageModuloPath, modulo.compile())
	}
	
	def generateAulaPage(Aula aula, IFileSystemAccess2 fsa) {
		val aulaPagePath = this.dirPath.pathfy() + snakefy(aula.name) + '.html'
		
		fsa.generateFile(aulaPagePath, aula.compile())
	}
	
//	=============== Path Manipulation Methods ==================
	
	def pathfy(ArrayList<String> list) {
		var pathString = '';
		
		for (elem : list) {
			pathString += elem + File.separator
		}
	
		return pathString
	}
	
	def pop(ArrayList<String> list) {
		list.remove(list.size - 1)
	}
		
	def String snakefy(String filename) {
		return filename.toLowerCase.replaceAll("\\s+", "-");
	}
		
//	=============== Compilation Methods ==================	
	
	def compile(Curso curso) {
		'''
		<html>
		
		<head>
			<title>«curso.name»</title>
		</head>
		
		<body>
			<h1> «curso.name» </h1>
			<h3> «curso.instituicao.value» </h3>
			«IF curso.descricao != null»
			<p> «curso.descricao.value» </p>
			«ENDIF»
			<p> Quantidade de Módulos: «curso.modulos.size» </p>
		</body>
		
		</html>
		'''
	}
	
	def compile(Modulo modulo) {
		'''
		<html>
		<head>
			<title>«modulo.name»</title>
		</head>
		<body>
			<h1> «modulo.name» </h1>
			«IF modulo.descricao != null»
			<p> «modulo.descricao.value» </p>
			«ENDIF»
			<p> Quantidade de Aulas: «modulo.aulas.size» </p>
		</body>
		</html>
		'''
	}
	
	def compile(Aula aula) {
		'''
		<html>
		<head>
			<title>«aula.name»</title>
		</head>
		<body>
			<h1> «aula.name» </h1>
			«IF aula.descricao != null»
			<p> «aula.descricao.value» </p>
			«ENDIF»
		
			«FOR autor : aula.autores»
			<label> Autor: «autor.nome» </label>
			«IF autor.email != null»
			<br>
			<label> «autor.email» </label>
			«ENDIF»
			«ENDFOR»
		
			«FOR secao : aula.secoes»
			«secao.compile()»
			«ENDFOR»
		</body>
		</html>
		'''
	}
	
	def compile(Topico topico) {
		'''
		<section>
			<h2> «topico.name» </h2>
			<hr>
			«FOR midia : topico.midias»
			«midia.compile()»
			«ENDFOR»
		</section>
		'''
	}
	
	def compile(Texto texto) {
		'''
		<p> «texto.value» </p>
		'''
	}
	
	def compile(Link link) {
		'''
		<a href="«link.fonte»">«link.titulo»</a>
		'''
	}
	
	def compile (Secao secao) {
		if (secao instanceof Topico) {
			val topico = secao as Topico
			topico.compile()	
		}
		else {
			''
		}
	}
	
	def compile(Midia midia){
		if (midia instanceof MidiaTextual) {
			val midiaTextual = midia as MidiaTextual
			midiaTextual.compile()
		}
		else {
			val midiaBinaria = midia as MidiaBinaria
			midiaBinaria.compile()
		}
	} 
	
	def compile(MidiaTextual midiaTextual) {		
		if (midiaTextual instanceof Texto) {
			val texto = midiaTextual as Texto
			texto.compile()
		}
		else {
			val link = midiaTextual as Link
			link.compile()
		}
	}
	
	def compile(MidiaBinaria midiaBinaria) {
		'''
		'''
	}
}
