/*
 * generated by Xtext 2.10.0
 */
package ioseph.francis.generator

import ioseph.francis.brand.Aula
import ioseph.francis.brand.Curso
import ioseph.francis.brand.Imagem
import ioseph.francis.brand.Link
import ioseph.francis.brand.Midia
import ioseph.francis.brand.MidiaBinaria
import ioseph.francis.brand.MidiaTextual
import ioseph.francis.brand.Modulo
import ioseph.francis.brand.Secao
import ioseph.francis.brand.Texto
import ioseph.francis.brand.Topico
import java.io.File
import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ioseph.francis.brand.Video
import ioseph.francis.brand.Audio
import ioseph.francis.brand.Animacao
import ioseph.francis.brand.Arquivo

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BrandGenerator extends AbstractGenerator {

	val dirPath = new ArrayList<String>()
		
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) { 
		
		val curso = resource.allContents.toIterable.filter(Curso).head
						
		this.dirPath.add(snakefy(curso.name))
		this.generateCursoIndexPage(curso, fsa)
			
		for(modulo : curso.modulos) {
			this.dirPath.add(snakefy(modulo.name))
			this.generateModuloIndexPage(modulo, fsa)
				
			for(aula : modulo.aulas) {
				this.generateAulaPage(aula, fsa)
			}
				
			this.dirPath.pop()
		}
			
		this.dirPath.pop()	
			
	}
	
//	=============== Generation Methods ==================
	
	def generateCursoIndexPage(Curso curso, IFileSystemAccess2 fsa) {
		val indexPageCursoPath = this.dirPath.pathfy() + 'index.html'
				
		fsa.generateFile(indexPageCursoPath, curso.compile())
	}
	
	def generateModuloIndexPage(Modulo modulo, IFileSystemAccess2 fsa) {
		val indexPageModuloPath = this.dirPath.pathfy() + 'index.html'
		
		fsa.generateFile(indexPageModuloPath, modulo.compile())
	}
	
	def generateAulaPage(Aula aula, IFileSystemAccess2 fsa) {
		val aulaPagePath = this.dirPath.pathfy() + snakefy(aula.name) + '.html'
		
		fsa.generateFile(aulaPagePath, aula.compile())
	}
	
//	=============== Path Manipulation Methods ==================
	
	def pathfy(ArrayList<String> list) {
		var pathString = '';
		
		for (elem : list) {
			pathString += elem + File.separator
		}
	
		return pathString
	}
	
	def pop(ArrayList<String> list) {
		list.remove(list.size - 1)
	}
		
	def String snakefy(String filename) {
		return filename.toLowerCase.replaceAll("\\s+", "-");
	}
		
//	=============== Compilation Methods ==================	
	
	def compile(Curso curso) {
		'''
		<html>
		
		<head>
			<title>«curso.name»</title>
		</head>
		
		<body>
			<h1> «curso.name» </h1>
			<h3> «curso.instituicao.value» </h3>
			«IF curso.descricao != null»
			<p> «curso.descricao.value» </p>
			«ENDIF»
			<p> Quantidade de Módulos: «curso.modulos.size» </p>
		</body>
		
		</html>
		'''
	}
	
	def compile(Modulo modulo) {
		'''
		<html>
		<head>
			<title>«modulo.name»</title>
		</head>
		<body>
			<h1> «modulo.name» </h1>
			«IF modulo.descricao != null»
			<p> «modulo.descricao.value» </p>
			«ENDIF»
			<p> Quantidade de Aulas: «modulo.aulas.size» </p>
		</body>
		</html>
		'''
	}
	
	def compile(Aula aula) {
		'''
		<html>
		<head>
			<title>«aula.name»</title>
		</head>
		<body>
			<h1> «aula.name» </h1>
			«IF aula.descricao != null»
			<p> «aula.descricao.value» </p>
			«ENDIF»
		
			«FOR autor : aula.autores»
			<label> Autor: «autor.nome» </label>
			«IF autor.email != null»
			<br>
			<label> «autor.email» </label>
			«ENDIF»
			«ENDFOR»
		
			«FOR secao : aula.secoes»
			«secao.compile()»
			«ENDFOR»
		</body>
		</html>
		'''
	}
	def compile (Secao secao) {
		if (secao instanceof Topico) {
			val topico = secao as Topico
			topico.compile()	
		}
		else {
			''
		}
	}
	
	def compile(Topico topico) {
		'''
		<section>
			<h2> «topico.name» </h2>
			<hr>
			«FOR midia : topico.midias»
			«midia.compile()»
			«ENDFOR»
		</section>
		'''
	}
	
	def compile(Midia midia){		
		if (midia instanceof MidiaTextual) {
			val midiaTextual = midia as MidiaTextual
			midiaTextual.compile()
		}
		else {
			val midiaBinaria = midia as MidiaBinaria
			midiaBinaria.compile()
		}
	} 
	
	def compile(MidiaTextual midiaTextual) {		
		if (midiaTextual instanceof Texto) {
			val texto = midiaTextual as Texto
			texto.compile()
		}
		else {
			val link = midiaTextual as Link
			link.compile()
		}
	}
	
	def compile(MidiaBinaria midiaBinaria) {
		
		if (midiaBinaria instanceof Imagem) {
			val imagem = midiaBinaria as Imagem
			imagem.compile()
		}
		
		else if (midiaBinaria instanceof Audio){
			val audio = midiaBinaria as Audio
			audio.compile()
		}
		else if (midiaBinaria instanceof Video) {
			val video = midiaBinaria as Video
			video.compile()
		}
		else if (midiaBinaria instanceof Animacao) {
			val anim = midiaBinaria as Animacao
			anim.compile()
		}
		else if (midiaBinaria instanceof Arquivo) {
			val arquivo = midiaBinaria as Arquivo
			arquivo.compile()
		}
		else {
			''''''
		}
	}
	
	def compile(Texto texto) {
		'''
		<p> «texto.value» </p>
		'''
	}
	
	def compile(Link link) {
		'''
		<a href="«link.fonte»">«link.titulo»</a>
		'''
	}
	
	def compile(Imagem imagem) {		
		'''
		<img src="«imagem.path»" «IF imagem.largura != 0 && imagem.altura != 0» width="«imagem.largura»" height="«imagem.altura»""«ENDIF»/>'''	
	}
	
	def compile(Audio audio) {
		'''
		<audio controls>
		  <source src="«audio.path»">
		Your browser does not support the audio element.
		</audio>
		'''
	}
	
	def compile(Video video) {
		'''
		<video controls «IF video.largura != 0 && video.altura != 0» width="«video.largura»" height="«video.altura»" «ENDIF»>
		  <source src="«video.path»" type="video/mp4">
		Your browser does not support the video tag.
		</video>
		'''
	}
	
	def compile(Animacao animacao) {
		''''''
	}
		
}
